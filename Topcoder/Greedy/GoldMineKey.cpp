#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

const int maxn = 51;
const int maxm = 301;
const int INF = 0x3fffffff;
using namespace std;

class GoldMine {
	vector<int> c[maxn];
	vector<int> ans[maxn][maxm];
	int v[maxn][maxm]; 
	int n, m;
	int calc(vector<int> &f, int w) {
		int ret = 0;
		for (int i = 0; i <= 6; i ++) {
			if (w < i) ret += 6 * f[i] * w;
			else if (w == i) ret += 5 * f[i] * w;
			else ret += f[i] * (5 * i - 2 * (w - i));
		}
		return ret;
	}
public:
	vector <int> getAllocation(vector <string>, int);
};

vector <int> GoldMine::getAllocation(vector <string> mines, int miners) {
	n = mines.size();
	for (int i = 0; i < n; i ++) {
		stringstream sin(mines[i]);
		string s;
		for (int j = 0; j <= 6; j ++) {
			sin >> s;
			int x = (s[0] - '0') * 100 + (s[1] - '0') * 10 + (s[2] - '0');
			c[i].push_back(x);
		}
	}
	m = miners;
	for (int i = 0; i <= n; i ++) for (int j = 0; j <= m; j ++) v[i][j] = -INF;
	v[0][0] = 0;
	for (int i = 0; i < n; i ++) {
		for (int j = 0; j <= m && j <= 6 * i; j ++) if (v[i][j] > -INF) {
			for (int k = 0; k <= 6 && j + k <= m; k ++) {
				int t = calc(c[i], k);
				if (v[i][j] + t >= v[i + 1][j + k]) {
					v[i + 1][j + k] = v[i][j] + t;
					ans[i + 1][j + k] = ans[i][j];
					ans[i + 1][j + k].push_back(k);
				}
			}
		}
	}
	return ans[n][m];
}
int main(){
	GoldMine instanceOfClass;
	// vector<string> in = {"000, 030, 030, 040, 000, 000, 000", "020, 020, 020, 010, 010, 010, 010"};
	vector<int> out = instanceOfClass.getAllocation({"002, 006, 016, 033, 012, 028, 003", "009, 015, 010, 012, 028, 026, 000", "009, 038, 001, 015, 008, 016, 013", "002, 027, 015, 011, 003, 041, 001", "002, 057, 001, 013, 004, 002, 021", "007, 004, 009, 005, 002, 053, 020", "012, 008, 017, 014, 018, 016, 015", "021, 029, 020, 006, 015, 003, 006", "002, 005, 019, 010, 004, 040, 020", "037, 006, 021, 004, 009, 007, 016", "002, 031, 023, 010, 029, 004, 001", "037, 010, 009, 002, 004, 009, 029", "006, 012, 036, 007, 029, 008, 002", "006, 001, 002, 017, 025, 028, 021", "028, 005, 026, 017, 001, 019, 004", "015, 037, 002, 011, 003, 024, 008", "023, 006, 003, 001, 007, 031, 029", "014, 013, 013, 002, 002, 008, 048", "012, 003, 001, 013, 062, 003, 006", "001, 001, 007, 004, 025, 054, 008", "002, 016, 026, 003, 014, 024, 015", "006, 014, 024, 011, 022, 010, 013", "021, 014, 004, 045, 004, 008, 004", "021, 026, 003, 008, 028, 004, 010", "022, 017, 014, 003, 034, 008, 002", "034, 002, 004, 016, 002, 004, 038", "019, 024, 035, 003, 010, 003, 006", "019, 025, 004, 023, 012, 014, 003", "024, 006, 012, 003, 008, 046, 001", "009, 020, 001, 014, 042, 013, 001", "004, 014, 010, 002, 021, 029, 020", "003, 023, 006, 004, 013, 020, 031", "011, 001, 017, 021, 022, 027, 001", "021, 026, 012, 006, 008, 005, 022", "017, 009, 007, 003, 015, 024, 025", "002, 021, 001, 008, 001, 013, 054", "023, 004, 009, 025, 015, 016, 008", "025, 012, 014, 006, 003, 008, 032", "008, 016, 005, 039, 016, 015, 001", "013, 006, 013, 004, 058, 005, 001", "002, 017, 034, 008, 002, 032, 005", "002, 038, 042, 001, 004, 011, 002", "008, 028, 003, 016, 008, 025, 012", "008, 003, 007, 015, 007, 032, 028", "013, 011, 004, 011, 005, 037, 019", "013, 017, 002, 023, 032, 009, 004", "014, 021, 014, 020, 011, 013, 007", "026, 011, 009, 006, 005, 030, 013", "026, 002, 022, 006, 003, 039, 002", "009, 009, 008, 014, 012, 023, 025"}, 64);
	// for(auto a: out){
	// 	cout << a << " ";
	// }
	// cout << endl;
	// for(auto a: {2, 1, 1, 1, 1, 3, 2, 1, 2, 0, 1, 0, 1, 3, 0, 1, 1, 1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 0, 2, 2, 1, 1, 1, 3, 2, 1, 1, 0, 0, 2}){
	// 	cout << a << " ";
	// }
	// cout << endl;

}